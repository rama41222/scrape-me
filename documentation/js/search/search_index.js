var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/CliService.html",[0,0.533,1,1.797]],["body/classes/CliService.html",[0,0.325,1,1.693,2,0.695,3,0.384,4,0.449,5,0.325,6,1.314,7,0.221,8,0.805,9,2.264,10,1.938,11,3.105,12,1.241,13,3.105,14,1.705,15,0.933,16,1.096,17,1.461,18,1.844,19,1.644,20,1.312,21,0.058,22,1.312,23,0.623,24,1.312,25,1.705,26,1.312,27,0.658,28,1.476,29,3.188,30,1.595,31,1.644,32,1.693,33,2.069,34,2.541,35,1.644,36,2.03,37,1.073,38,1.949,39,1.644,40,0.816,41,3.493,42,1.516,43,1.644,44,2.327,45,2.03,46,3.105,47,2.099,48,2.069,49,1.516,50,2.541,51,3.105,52,1.476,53,1.476,54,1.644,55,3.493,56,1.644,57,2.541,58,2.069,59,1.705,60,0.695,61,1.314,62,0.933,63,1.644,64,0.449,65,0.933,66,1.705,67,2.03,68,1.644,69,1.644,70,1.644,71,3.776,72,1.314,73,1.314,74,1.644,75,1.761,76,3.105,77,1.314,78,3.105,79,1.644,80,1.644,81,2.142,82,2.541,83,2.541,84,1.644,85,1.644,86,2.541,87,1.644,88,2.069,89,2.541,90,1.644,91,1.644,92,2.541,93,2.541,94,1.644,95,2.541,96,1.644,97,1.644,98,0.933,99,0.933,100,1.644,101,1.644,102,1.644,103,2.541,104,1.644,105,1.644,106,1.644,107,1.644,108,0.933,109,1.314,110,0.017,111,0.027,112,0.017]],["title/interfaces/CommandCollection.html",[10,1.139,113,0.736]],["body/interfaces/CommandCollection.html",[3,0.76,4,0.889,5,0.644,7,0.438,8,1.303,10,1.738,14,1.589,21,0.057,23,0.744,27,0.823,28,2.108,30,2.108,38,2.008,40,0.76,42,2.474,53,1.905,64,1.231,110,0.034,111,0.043,112,0.034,113,1.123,114,1.589,115,1.847,116,2.6,117,1.589]],["title/classes/FetchService.html",[0,0.533,118,1.53]],["body/classes/FetchService.html",[0,0.574,2,1.226,3,0.678,4,0.793,5,0.574,7,0.391,12,1.865,15,1.647,16,1.934,17,1.772,18,1.865,20,1.614,21,0.056,22,1.614,23,0.63,24,1.614,40,1.06,47,1.865,52,1.804,59,2.085,60,1.614,62,1.647,64,0.793,65,1.647,66,1.417,75,1.647,81,2.167,98,1.647,108,1.647,110,0.03,111,0.04,112,0.03,118,2.167,119,2.319,120,2.845,121,3.82,122,2.903,123,3.82,124,2.903,125,3.052,126,3.82,127,3.82,128,2.167,129,2.574,130,1.865,131,1.934,132,2.319,133,1.934,134,2.903,135,2.903,136,2.319,137,2.319,138,2.546,139,2.903,140,2.319,141,2.903]],["title/classes/Logger.html",[0,0.533,17,0.987]],["body/classes/Logger.html",[0,0.38,2,0.813,3,0.945,4,0.525,5,0.38,7,0.259,8,0.907,9,2.905,12,1.397,17,1.385,18,2.291,20,1.444,21,0.057,22,1.444,23,0.564,24,1.444,25,2.325,26,1.982,40,1.126,52,1.444,59,0.939,64,0.525,66,2.07,109,2.729,110,0.02,111,0.03,112,0.02,142,1.536,143,3.417,144,3.417,145,3.417,146,3.417,147,3.417,148,3.417,149,2.521,150,2.286,151,2.861,152,1.923,153,2.861,154,1.923,155,2.861,156,2.286,157,2.286,158,2.861,159,1.923,160,2.861,161,1.923,162,2.861,163,1.923,164,2.861,165,1.923,166,2.861,167,1.923,168,2.861,169,3.851,170,1.923,171,3.023,172,3.387,173,2.729,174,2.861,175,1.923,176,2.861,177,1.923,178,2.861,179,2.286,180,1.923,181,1.923,182,1.923,183,4.24,184,2.861,185,3.417,186,2.729,187,3.417,188,1.923,189,1.923,190,1.923,191,1.923,192,1.923,193,1.923,194,1.923]],["title/interfaces/MetaData.html",[27,0.445,113,0.736]],["body/interfaces/MetaData.html",[3,0.773,4,0.903,5,0.654,7,0.445,8,1.316,21,0.055,23,0.786,27,0.685,40,1.201,64,1.134,110,0.035,111,0.044,112,0.035,113,1.134,114,1.615,195,2.204,196,3.271,197,3.271,198,3.807,199,3.271,200,4.145,201,1.876,202,2.204,203,2.204]],["title/interfaces/MetaDataInput.html",[113,0.736,201,1.53]],["body/interfaces/MetaDataInput.html",[3,0.755,4,0.883,5,0.64,7,0.435,8,1.298,21,0.055,23,0.804,27,0.533,40,1.196,64,1.118,110,0.034,111,0.043,112,0.034,113,1.118,114,1.579,195,2.155,196,3.249,197,3.249,198,2.584,199,3.249,200,4.185,201,2.324,202,3.149,203,3.149]],["title/interfaces/ParseArgs.html",[14,1.317,113,0.736]],["body/interfaces/ParseArgs.html",[3,0.778,4,0.909,5,0.658,7,0.448,8,1.322,10,1.407,14,2.037,21,0.057,23,0.688,27,0.751,28,1.925,30,1.925,38,2.402,40,1.064,42,2.402,53,1.407,64,1.244,110,0.035,111,0.044,112,0.035,113,1.139,114,1.626,115,1.889,116,2.659,117,2.332]],["title/classes/ScraperService.html",[0,0.533,204,1.53]],["body/classes/ScraperService.html",[0,0.187,2,0.399,3,0.221,4,0.258,5,0.319,7,0.285,8,0.512,9,2.299,12,0.789,15,0.536,17,1.201,18,1.689,20,1.386,21,0.057,22,1.386,23,0.618,24,1.386,25,0.461,26,0.399,29,0.754,40,1.201,44,1.076,47,2.189,48,2.847,49,1.602,52,1.674,59,1.764,60,0.682,62,0.536,64,0.258,65,0.536,66,1.935,67,1.691,73,0.754,75,2.458,81,2.049,88,1.67,98,0.916,99,0.536,108,0.916,110,0.01,111,0.017,112,0.01,117,0.461,118,1.742,120,2.407,125,2.453,128,0.536,129,2.248,130,1.689,131,0.629,132,2.002,133,2.305,136,1.691,137,1.29,138,1.67,140,1.29,156,0.754,169,1.29,171,0.754,186,0.754,196,2.847,197,0.629,199,0.629,202,2.701,203,2.495,204,0.916,205,0.754,206,2.117,207,1.615,208,1.615,209,1.615,210,2.117,211,2.117,212,1.691,213,2.453,214,0.944,215,1.615,216,1.615,217,3.505,218,0.944,219,1.29,220,2.506,221,2.046,222,1.615,223,0.944,224,2.453,225,1.615,226,0.944,227,0.944,228,3.361,229,0.944,230,2.002,231,1.691,232,2.886,233,0.944,234,0.944,235,0.944,236,1.615,237,0.944,238,1.201,239,2.817,240,2.002,241,0.944,242,0.944,243,0.944,244,0.944,245,0.629,246,0.754,247,0.629,248,0.629,249,1.076,250,0.629,251,0.944,252,2.117,253,2.506,254,1.615,255,1.615,256,0.944,257,1.615,258,0.944,259,1.615,260,2.817,261,0.944,262,0.754,263,1.615,264,1.615,265,1.615,266,1.615,267,0.629,268,3.282,269,0.944,270,0.944,271,2.117,272,1.615,273,1.615,274,1.615,275,1.29,276,0.944,277,0.944,278,0.944,279,0.944,280,0.754,281,1.29,282,0.944,283,1.615,284,1.615,285,0.944,286,0.944,287,0.944,288,0.944,289,1.615,290,1.615,291,0.944,292,0.944,293,0.944,294,0.944,295,0.944,296,0.944,297,0.944,298,1.615,299,0.944,300,0.944,301,0.944,302,0.944,303,1.615,304,0.944,305,0.944,306,0.944,307,0.944,308,0.944,309,0.754,310,0.944,311,0.944,312,0.944,313,0.944,314,0.944,315,0.944,316,0.944,317,0.944,318,0.944,319,0.944,320,0.944,321,0.754,322,0.944,323,0.629,324,0.944,325,0.944,326,0.944,327,0.944,328,1.615,329,0.944]],["title/classes/TaskService.html",[0,0.533,330,1.797]],["body/classes/TaskService.html",[0,0.278,2,0.593,3,0.328,4,0.383,5,0.554,7,0.189,8,0.711,9,1.817,10,1.479,12,1.096,15,0.797,16,0.936,17,1.367,18,1.823,20,1.353,21,0.057,22,1.353,23,0.528,24,1.353,25,0.686,26,0.593,27,0.76,28,1.72,30,1.656,32,1.495,33,2.868,37,0.593,40,0.951,42,1.709,47,1.096,52,1.72,53,0.593,59,2.049,60,0.593,61,1.122,62,0.797,64,0.383,65,0.797,66,1.369,72,1.122,75,2.381,81,0.797,88,0.936,98,0.797,99,1.273,108,0.797,110,0.015,111,0.024,112,0.015,117,0.686,120,2.797,128,1.817,129,2.539,130,1.564,133,2.487,138,0.936,149,0.936,173,2.558,204,2.223,212,2.239,221,1.868,231,2.239,238,0.797,240,1.793,245,1.495,280,2.797,321,1.122,323,0.936,330,1.495,331,1.122,332,2.804,333,2.245,334,3.202,335,3.13,336,2.245,337,2.245,338,2.245,339,2.245,340,1.404,341,1.793,342,2.804,343,2.245,344,1.404,345,3.501,346,1.404,347,2.245,348,1.404,349,2.245,350,1.404,351,1.793,352,1.404,353,2.245,354,1.404,355,1.404,356,1.793,357,1.404,358,2.245,359,1.404,360,1.404,361,1.404,362,1.404,363,2.245,364,2.245,365,2.245,366,2.804,367,2.245,368,1.404,369,2.245,370,2.245,371,1.404,372,1.404,373,1.404,374,3.501,375,1.404,376,1.404,377,1.404,378,1.404,379,1.404,380,1.404,381,1.404,382,1.404,383,1.404,384,1.404,385,1.404,386,1.404,387,2.239,388,2.245,389,1.404,390,2.245,391,1.122,392,1.404,393,1.404,394,1.404,395,1.404,396,1.404,397,1.404,398,1.122,399,1.122,400,2.558,401,2.558,402,1.793,403,1.404,404,1.404,405,1.122,406,1.122,407,1.404,408,1.404,409,1.404,410,1.404,411,2.245,412,1.404,413,1.404,414,2.245,415,1.404,416,1.404]],["title/coverage.html",[417,2.905]],["body/coverage.html",[0,0.94,1,1.985,5,0.589,6,2.38,10,1.259,14,1.455,17,1.091,21,0.056,23,0.491,27,0.491,37,1.259,44,3.167,60,1.259,99,1.69,110,0.031,111,0.041,112,0.031,113,1.251,115,2.204,118,1.69,119,2.38,142,2.38,195,2.589,201,1.69,204,1.69,205,2.38,247,1.985,248,1.985,249,1.985,250,1.985,330,1.985,331,2.38,405,3.797,406,3.797,417,2.38,418,1.985,419,2.979,420,2.979,421,2.38,422,2.979,423,2.979,424,2.38,425,4.754,426,3.886,427,2.979,428,2.979,429,2.979,430,2.979,431,2.979,432,2.979,433,2.979,434,2.979,435,2.979,436,2.979,437,3.661,438,2.979,439,2.979,440,2.979,441,2.979]],["title/dependencies.html",[442,2.273,443,2.581]],["body/dependencies.html",[21,0.056,37,1.6,110,0.04,111,0.047,112,0.04,130,1.849,131,2.523,179,3.025,217,3.025,245,2.523,246,3.025,356,3.025,443,3.025,444,3.786,445,3.786,446,3.786,447,3.786,448,3.786,449,3.786,450,3.786,451,3.786,452,3.786,453,3.786]],["title/miscellaneous/enumerations.html",[454,0.96,455,2.581]],["body/miscellaneous/enumerations.html",[7,0.523,21,0.054,26,2.06,27,0.756,28,1.937,30,1.937,38,2.238,110,0.041,111,0.048,112,0.041,115,2.205,454,1.642,455,3.105,456,3.887]],["title/miscellaneous/functions.html",[454,0.96,457,2.581]],["body/miscellaneous/functions.html",[5,0.766,7,0.399,20,2.005,21,0.054,22,2.005,23,0.488,24,2.005,27,0.711,32,2.579,37,1.635,38,1.89,40,0.904,45,2.366,47,1.89,48,2.579,49,1.89,52,1.932,53,1.635,58,1.974,110,0.031,111,0.041,112,0.031,117,1.89,129,2.196,221,1.974,228,3.092,230,2.366,232,2.366,247,2.579,248,2.579,249,2.579,250,2.579,262,2.366,267,1.974,275,2.366,335,2.366,341,2.366,424,2.366,437,2.366,454,1.251,457,2.366,458,2.366,459,4.573,460,2.962,461,3.871,462,2.962,463,2.962,464,2.962,465,2.962,466,2.962,467,2.962,468,2.962,469,2.962,470,2.962,471,3.871,472,3.092,473,2.962]],["title/index.html",[7,0.306,474,1.816,475,1.515]],["body/index.html",[21,0.055,27,0.771,28,1.976,30,1.7,33,2.095,37,1.328,42,1.965,49,1.535,53,1.328,110,0.033,111,0.042,112,0.033,130,2.361,157,2.512,213,2.512,238,2.283,267,2.095,351,2.512,387,3.214,398,2.512,399,2.512,400,3.737,401,3.737,402,3.214,418,2.095,476,3.145,477,3.145,478,3.145,479,4.437,480,3.145,481,4.678,482,4.024,483,3.145,484,4.024,485,4.024,486,3.145,487,3.145,488,3.145,489,3.145,490,3.145,491,3.145,492,3.145,493,3.145,494,3.145,495,3.145]],["title/license.html",[474,1.816,475,1.515,496,1.816]],["body/license.html",[21,0.041,110,0.032,111,0.041,112,0.032,281,2.43,309,3.146,418,2.026,496,2.43,497,3.041,498,4.368,499,3.041,500,3.041,501,3.041,502,3.938,503,3.041,504,3.041,505,3.041,506,3.041,507,3.041,508,3.041,509,3.938,510,5.111,511,3.041,512,3.041,513,4.368,514,3.041,515,3.938,516,3.041,517,3.041,518,3.041,519,3.041,520,3.041,521,3.041,522,3.041,523,3.041,524,3.041,525,3.938,526,3.041,527,3.041,528,3.041,529,3.041,530,3.041,531,3.041,532,3.041,533,3.938,534,3.938,535,3.041,536,3.041,537,3.041,538,3.041,539,3.041,540,3.041,541,3.041,542,3.041,543,3.041,544,3.041,545,3.041,546,3.041,547,3.041,548,3.041,549,3.041,550,3.041,551,3.041,552,3.041,553,3.041,554,3.041,555,3.041,556,3.041,557,3.041,558,3.041,559,3.041,560,3.041,561,3.041,562,3.041,563,3.041,564,3.041,565,3.041]],["title/modules.html",[566,2.905]],["body/modules.html",[21,0.05,110,0.044,111,0.05,112,0.044,566,3.334]],["title/overview.html",[567,2.905]],["body/overview.html",[2,1.735,21,0.05,110,0.043,111,0.05,112,0.043,114,2.005,567,3.28,568,4.106,569,4.106]],["title/miscellaneous/variables.html",[454,0.96,570,2.581]],["body/miscellaneous/variables.html",[3,0.773,7,0.445,21,0.056,23,0.545,25,1.615,26,1.397,27,0.545,36,2.642,49,1.615,58,2.204,60,1.755,77,2.642,110,0.035,111,0.044,112,0.035,128,1.876,149,3.027,150,2.642,172,2.642,219,2.642,224,2.642,238,1.876,323,3.027,391,3.319,421,2.642,454,1.397,458,2.642,472,2.642,475,2.204,570,2.642,571,3.308,572,4.155,573,3.308,574,3.308,575,3.308,576,3.308,577,3.308,578,3.308,579,3.308,580,3.308,581,4.155,582,3.308,583,3.308,584,3.308,585,3.308,586,4.155,587,3.308,588,3.308]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":406,"title":{},"body":{"classes/TaskService.html":{},"coverage.html":{}}}],["0/1",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":405,"title":{},"body":{"classes/TaskService.html":{},"coverage.html":{}}}],["2",{"_index":187,"title":{},"body":{"classes/Logger.html":{}}}],["2.6.1",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":500,"title":{},"body":{"license.html":{}}}],["3.2.25",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["3.9.0",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":569,"title":{},"body":{"overview.html":{}}}],["4.1.1",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["4/11",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":568,"title":{},"body":{"overview.html":{}}}],["57",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["777",{"_index":485,"title":{},"body":{"index.html":{}}}],["above",{"_index":532,"title":{},"body":{"license.html":{}}}],["action",{"_index":558,"title":{},"body":{"license.html":{}}}],["add",{"_index":277,"title":{},"body":{"classes/ScraperService.html":{}}}],["already",{"_index":300,"title":{},"body":{"classes/ScraperService.html":{}}}],["anchor",{"_index":219,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/variables.html":{}}}],["anchors",{"_index":203,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"classes/ScraperService.html":{}}}],["anchors.length",{"_index":325,"title":{},"body":{"classes/ScraperService.html":{}}}],["and/or",{"_index":523,"title":{},"body":{"license.html":{}}}],["anything",{"_index":473,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arg",{"_index":76,"title":{},"body":{"classes/CliService.html":{}}}],["arg?.startswith",{"_index":78,"title":{},"body":{"classes/CliService.html":{}}}],["args",{"_index":38,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["args.help",{"_index":90,"title":{},"body":{"classes/CliService.html":{}}}],["args.metadata",{"_index":87,"title":{},"body":{"classes/CliService.html":{}}}],["argument",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arguments",{"_index":58,"title":{},"body":{"classes/CliService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["arising",{"_index":562,"title":{},"body":{"license.html":{}}}],["array",{"_index":42,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"classes/TaskService.html":{},"index.html":{}}}],["array=['https",{"_index":97,"title":{},"body":{"classes/CliService.html":{}}}],["assign",{"_index":380,"title":{},"body":{"classes/TaskService.html":{}}}],["associated",{"_index":511,"title":{},"body":{"license.html":{}}}],["async",{"_index":120,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["authors",{"_index":551,"title":{},"body":{"license.html":{}}}],["available",{"_index":398,"title":{},"body":{"classes/TaskService.html":{},"index.html":{}}}],["await",{"_index":133,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["bar",{"_index":403,"title":{},"body":{"classes/TaskService.html":{}}}],["base",{"_index":259,"title":{},"body":{"classes/ScraperService.html":{}}}],["base64",{"_index":289,"title":{},"body":{"classes/ScraperService.html":{}}}],["bin/fetch",{"_index":486,"title":{},"body":{"index.html":{}}}],["blue",{"_index":143,"title":{},"body":{"classes/Logger.html":{}}}],["body",{"_index":263,"title":{},"body":{"classes/ScraperService.html":{}}}],["boolean",{"_index":53,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["break",{"_index":89,"title":{},"body":{"classes/CliService.html":{}}}],["buffer",{"_index":136,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{}}}],["buffer.from",{"_index":141,"title":{},"body":{"classes/FetchService.html":{}}}],["bugger",{"_index":311,"title":{},"body":{"classes/ScraperService.html":{}}}],["buildcrawling",{"_index":495,"title":{},"body":{"index.html":{}}}],["building",{"_index":489,"title":{},"body":{"index.html":{}}}],["c",{"_index":499,"title":{},"body":{"license.html":{}}}],["case",{"_index":86,"title":{},"body":{"classes/CliService.html":{}}}],["catch",{"_index":108,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["chalk",{"_index":179,"title":{},"body":{"classes/Logger.html":{},"dependencies.html":{}}}],["chalk.bold.bluebright",{"_index":151,"title":{},"body":{"classes/Logger.html":{}}}],["chalk.bold.gray",{"_index":158,"title":{},"body":{"classes/Logger.html":{}}}],["chalk.bold.green",{"_index":160,"title":{},"body":{"classes/Logger.html":{}}}],["chalk.bold.red",{"_index":153,"title":{},"body":{"classes/Logger.html":{}}}],["chalk.bold.redbright",{"_index":162,"title":{},"body":{"classes/Logger.html":{}}}],["chalk.bold.white",{"_index":166,"title":{},"body":{"classes/Logger.html":{}}}],["chalk.keyword('orange",{"_index":164,"title":{},"body":{"classes/Logger.html":{}}}],["charge",{"_index":506,"title":{},"body":{"license.html":{}}}],["check",{"_index":67,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{}}}],["checkifvalidurl",{"_index":13,"title":{},"body":{"classes/CliService.html":{}}}],["checkifvalidurl(link",{"_index":39,"title":{},"body":{"classes/CliService.html":{}}}],["checks",{"_index":45,"title":{},"body":{"classes/CliService.html":{},"miscellaneous/functions.html":{}}}],["cheerio",{"_index":217,"title":{},"body":{"classes/ScraperService.html":{},"dependencies.html":{}}}],["cheerio.load(pagebuffer",{"_index":312,"title":{},"body":{"classes/ScraperService.html":{}}}],["chmod",{"_index":484,"title":{},"body":{"index.html":{}}}],["claim",{"_index":554,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"overview.html":{}}}],["cli",{"_index":37,"title":{},"body":{"classes/CliService.html":{},"classes/TaskService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["cli(args",{"_index":460,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cli.types",{"_index":63,"title":{},"body":{"classes/CliService.html":{}}}],["cli/cli.types",{"_index":350,"title":{},"body":{"classes/TaskService.html":{}}}],["cliprogress",{"_index":355,"title":{},"body":{"classes/TaskService.html":{}}}],["cliprogress.presets.rect",{"_index":338,"title":{},"body":{"classes/TaskService.html":{}}}],["cliprogress.singlebar",{"_index":337,"title":{},"body":{"classes/TaskService.html":{}}}],["cliservice",{"_index":1,"title":{"classes/CliService.html":{}},"body":{"classes/CliService.html":{},"coverage.html":{}}}],["close",{"_index":386,"title":{},"body":{"classes/TaskService.html":{}}}],["closes",{"_index":384,"title":{},"body":{"classes/TaskService.html":{}}}],["collector",{"_index":34,"title":{},"body":{"classes/CliService.html":{}}}],["color",{"_index":155,"title":{},"body":{"classes/Logger.html":{}}}],["colors",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["command",{"_index":488,"title":{},"body":{"index.html":{}}}],["commandcollection",{"_index":10,"title":{"interfaces/CommandCollection.html":{}},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"classes/TaskService.html":{},"coverage.html":{}}}],["commandline",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commands",{"_index":33,"title":{},"body":{"classes/CliService.html":{},"classes/TaskService.html":{},"index.html":{}}}],["completed",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":531,"title":{},"body":{"license.html":{}}}],["connection",{"_index":564,"title":{},"body":{"license.html":{}}}],["console",{"_index":280,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["console.error",{"_index":192,"title":{},"body":{"classes/Logger.html":{}}}],["console.info",{"_index":180,"title":{},"body":{"classes/Logger.html":{}}}],["console.log",{"_index":188,"title":{},"body":{"classes/Logger.html":{}}}],["const",{"_index":75,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["constants",{"_index":60,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constants.log.metadata",{"_index":389,"title":{},"body":{"classes/TaskService.html":{}}}],["constants.log.metadata_notfound",{"_index":393,"title":{},"body":{"classes/TaskService.html":{}}}],["constants/index",{"_index":61,"title":{},"body":{"classes/CliService.html":{},"classes/TaskService.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["constructor(fetchservice",{"_index":214,"title":{},"body":{"classes/ScraperService.html":{}}}],["constructor(logger",{"_index":16,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/TaskService.html":{}}}],["constructor(private",{"_index":65,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["contain",{"_index":101,"title":{},"body":{"classes/CliService.html":{}}}],["contract",{"_index":559,"title":{},"body":{"license.html":{}}}],["copies",{"_index":525,"title":{},"body":{"license.html":{}}}],["copy",{"_index":509,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":498,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":417,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crawl",{"_index":30,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"classes/TaskService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["crawl(websites",{"_index":339,"title":{},"body":{"classes/TaskService.html":{}}}],["crawled",{"_index":301,"title":{},"body":{"classes/ScraperService.html":{}}}],["crawling",{"_index":323,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/variables.html":{}}}],["crawljobs",{"_index":360,"title":{},"body":{"classes/TaskService.html":{}}}],["create",{"_index":321,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["crlfdelay",{"_index":378,"title":{},"body":{"classes/TaskService.html":{}}}],["current",{"_index":381,"title":{},"body":{"classes/TaskService.html":{}}}],["damages",{"_index":555,"title":{},"body":{"license.html":{}}}],["data",{"_index":169,"title":{},"body":{"classes/Logger.html":{},"classes/ScraperService.html":{}}}],["date().toutcstring",{"_index":299,"title":{},"body":{"classes/ScraperService.html":{}}}],["deal",{"_index":512,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":565,"title":{},"body":{"license.html":{}}}],["default",{"_index":25,"title":{},"body":{"classes/CliService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["dependencies",{"_index":443,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":461,"title":{},"body":{"miscellaneous/functions.html":{}}}],["destination",{"_index":367,"title":{},"body":{"classes/TaskService.html":{}}}],["different",{"_index":85,"title":{},"body":{"classes/CliService.html":{}}}],["dinushanka",{"_index":501,"title":{},"body":{"license.html":{}}}],["disk",{"_index":232,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/functions.html":{}}}],["distribute",{"_index":521,"title":{},"body":{"license.html":{}}}],["docinstallation",{"_index":483,"title":{},"body":{"index.html":{}}}],["docs",{"_index":479,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":418,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":395,"title":{},"body":{"classes/TaskService.html":{}}}],["downloads",{"_index":487,"title":{},"body":{"index.html":{}}}],["downloads/${path.basename(request)}/.metadata",{"_index":368,"title":{},"body":{"classes/TaskService.html":{}}}],["downloads/${path.basename(url",{"_index":314,"title":{},"body":{"classes/ScraperService.html":{}}}],["downloads/${path.basename(url)}/${path.dirname",{"_index":272,"title":{},"body":{"classes/ScraperService.html":{}}}],["e",{"_index":138,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["e?.message",{"_index":140,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{}}}],["element",{"_index":242,"title":{},"body":{"classes/ScraperService.html":{}}}],["encoded",{"_index":290,"title":{},"body":{"classes/ScraperService.html":{}}}],["entry",{"_index":476,"title":{},"body":{"index.html":{}}}],["enum",{"_index":116,"title":{},"body":{"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{}}}],["enumerations",{"_index":455,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":109,"title":{},"body":{"classes/CliService.html":{},"classes/Logger.html":{}}}],["error",{"_index":149,"title":{},"body":{"classes/Logger.html":{},"classes/TaskService.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":168,"title":{},"body":{"classes/Logger.html":{}}}],["esm",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["event",{"_index":550,"title":{},"body":{"license.html":{}}}],["events",{"_index":352,"title":{},"body":{"classes/TaskService.html":{}}}],["examples",{"_index":399,"title":{},"body":{"classes/TaskService.html":{},"index.html":{}}}],["exist",{"_index":396,"title":{},"body":{"classes/TaskService.html":{}}}],["export",{"_index":64,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["express",{"_index":541,"title":{},"body":{"license.html":{}}}],["extension",{"_index":275,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/functions.html":{}}}],["extra",{"_index":246,"title":{},"body":{"classes/ScraperService.html":{},"dependencies.html":{}}}],["extract",{"_index":307,"title":{},"body":{"classes/ScraperService.html":{}}}],["failure",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":29,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{}}}],["fetch",{"_index":130,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"dependencies.html":{},"index.html":{}}}],["fetch(url",{"_index":134,"title":{},"body":{"classes/FetchService.html":{}}}],["fetch/fetch.service",{"_index":241,"title":{},"body":{"classes/ScraperService.html":{}}}],["fetchanchors",{"_index":207,"title":{},"body":{"classes/ScraperService.html":{}}}],["fetchanchors(anchors",{"_index":216,"title":{},"body":{"classes/ScraperService.html":{}}}],["fetches",{"_index":125,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{}}}],["fetchimages",{"_index":208,"title":{},"body":{"classes/ScraperService.html":{}}}],["fetchimages(images",{"_index":222,"title":{},"body":{"classes/ScraperService.html":{}}}],["fetching",{"_index":102,"title":{},"body":{"classes/CliService.html":{}}}],["fetching_error",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetchlinks",{"_index":209,"title":{},"body":{"classes/ScraperService.html":{}}}],["fetchlinks(links",{"_index":225,"title":{},"body":{"classes/ScraperService.html":{}}}],["fetchmetadata",{"_index":333,"title":{},"body":{"classes/TaskService.html":{}}}],["fetchmetadata(metadata",{"_index":343,"title":{},"body":{"classes/TaskService.html":{}}}],["fetchpagesfromweb",{"_index":121,"title":{},"body":{"classes/FetchService.html":{}}}],["fetchpagesfromweb(url",{"_index":123,"title":{},"body":{"classes/FetchService.html":{}}}],["fetchservice",{"_index":118,"title":{"classes/FetchService.html":{}},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"coverage.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["filename",{"_index":260,"title":{},"body":{"classes/ScraperService.html":{}}}],["files",{"_index":281,"title":{},"body":{"classes/ScraperService.html":{},"license.html":{}}}],["filestream",{"_index":370,"title":{},"body":{"classes/TaskService.html":{}}}],["fitness",{"_index":546,"title":{},"body":{"license.html":{}}}],["flag",{"_index":70,"title":{},"body":{"classes/CliService.html":{}}}],["flags",{"_index":74,"title":{},"body":{"classes/CliService.html":{}}}],["following",{"_index":530,"title":{},"body":{"license.html":{}}}],["found",{"_index":391,"title":{},"body":{"classes/TaskService.html":{},"miscellaneous/variables.html":{}}}],["free",{"_index":505,"title":{},"body":{"license.html":{}}}],["fs",{"_index":245,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{},"dependencies.html":{}}}],["fs.createreadstream(destination",{"_index":371,"title":{},"body":{"classes/TaskService.html":{}}}],["fse",{"_index":244,"title":{},"body":{"classes/ScraperService.html":{}}}],["fse.outputfilesync(savepath",{"_index":284,"title":{},"body":{"classes/ScraperService.html":{}}}],["function",{"_index":44,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{},"coverage.html":{}}}],["functions",{"_index":457,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":528,"title":{},"body":{"license.html":{}}}],["general",{"_index":178,"title":{},"body":{"classes/Logger.html":{}}}],["generate",{"_index":267,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["generates",{"_index":469,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generation",{"_index":295,"title":{},"body":{"classes/ScraperService.html":{}}}],["getting",{"_index":474,"title":{"index.html":{},"license.html":{}},"body":{}}],["geturl",{"_index":247,"title":{},"body":{"classes/ScraperService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["geturl(image",{"_index":287,"title":{},"body":{"classes/ScraperService.html":{}}}],["geturl(link",{"_index":262,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/functions.html":{}}}],["granted",{"_index":504,"title":{},"body":{"license.html":{}}}],["gray",{"_index":144,"title":{},"body":{"classes/Logger.html":{}}}],["green",{"_index":145,"title":{},"body":{"classes/Logger.html":{}}}],["hasextension",{"_index":248,"title":{},"body":{"classes/ScraperService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["hasextension(link",{"_index":467,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hasextension(savepath",{"_index":276,"title":{},"body":{"classes/ScraperService.html":{}}}],["hasprotocol",{"_index":103,"title":{},"body":{"classes/CliService.html":{}}}],["help",{"_index":28,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"classes/TaskService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["helpneeded",{"_index":358,"title":{},"body":{"classes/TaskService.html":{}}}],["hereby",{"_index":503,"title":{},"body":{"license.html":{}}}],["holders",{"_index":552,"title":{},"body":{"license.html":{}}}],["host",{"_index":228,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/functions.html":{}}}],["href",{"_index":255,"title":{},"body":{"classes/ScraperService.html":{}}}],["html",{"_index":278,"title":{},"body":{"classes/ScraperService.html":{}}}],["http",{"_index":51,"title":{},"body":{"classes/CliService.html":{}}}],["https",{"_index":50,"title":{},"body":{"classes/CliService.html":{}}}],["https://www.autify.com",{"_index":401,"title":{},"body":{"classes/TaskService.html":{},"index.html":{}}}],["https://www.google.com",{"_index":400,"title":{},"body":{"classes/TaskService.html":{},"index.html":{}}}],["https://www.yahoo.com",{"_index":402,"title":{},"body":{"classes/TaskService.html":{},"index.html":{}}}],["identifier",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":224,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/variables.html":{}}}],["image.startswith('data",{"_index":294,"title":{},"body":{"classes/ScraperService.html":{}}}],["image_parsing_error",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["images",{"_index":196,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"classes/ScraperService.html":{}}}],["images.length",{"_index":326,"title":{},"body":{"classes/ScraperService.html":{}}}],["img",{"_index":256,"title":{},"body":{"classes/ScraperService.html":{}}}],["img.attribs.src",{"_index":257,"title":{},"body":{"classes/ScraperService.html":{}}}],["img.attribs.srcset",{"_index":258,"title":{},"body":{"classes/ScraperService.html":{}}}],["implement",{"_index":292,"title":{},"body":{"classes/ScraperService.html":{}}}],["implied",{"_index":542,"title":{},"body":{"license.html":{}}}],["import",{"_index":59,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["incase",{"_index":394,"title":{},"body":{"classes/TaskService.html":{}}}],["included",{"_index":535,"title":{},"body":{"license.html":{}}}],["including",{"_index":515,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":349,"title":{},"body":{"classes/TaskService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexlocation",{"_index":313,"title":{},"body":{"classes/ScraperService.html":{}}}],["indexlocation}/index.html",{"_index":316,"title":{},"body":{"classes/ScraperService.html":{}}}],["infinity",{"_index":379,"title":{},"body":{"classes/TaskService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/variables.html":{}}}],["info(message",{"_index":174,"title":{},"body":{"classes/Logger.html":{}}}],["init",{"_index":157,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["initialize",{"_index":363,"title":{},"body":{"classes/TaskService.html":{}}}],["input",{"_index":377,"title":{},"body":{"classes/TaskService.html":{}}}],["interface",{"_index":113,"title":{"interfaces/CommandCollection.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{}},"body":{"interfaces/CommandCollection.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"coverage.html":{}}}],["interfaces",{"_index":114,"title":{},"body":{"interfaces/CommandCollection.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"overview.html":{}}}],["invalid",{"_index":77,"title":{},"body":{"classes/CliService.html":{},"miscellaneous/variables.html":{}}}],["invalid_argument",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ismetadata",{"_index":71,"title":{},"body":{"classes/CliService.html":{}}}],["it's",{"_index":68,"title":{},"body":{"classes/CliService.html":{}}}],["iterate",{"_index":72,"title":{},"body":{"classes/CliService.html":{},"classes/TaskService.html":{}}}],["json.parse(lastrecord",{"_index":390,"title":{},"body":{"classes/TaskService.html":{}}}],["json.stringify(data",{"_index":185,"title":{},"body":{"classes/Logger.html":{}}}],["kind",{"_index":540,"title":{},"body":{"license.html":{}}}],["last",{"_index":364,"title":{},"body":{"classes/TaskService.html":{}}}],["last_fetch",{"_index":197,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"classes/ScraperService.html":{}}}],["lastrecord",{"_index":366,"title":{},"body":{"classes/TaskService.html":{}}}],["level",{"_index":477,"title":{},"body":{"index.html":{}}}],["liability",{"_index":556,"title":{},"body":{"license.html":{}}}],["liable",{"_index":553,"title":{},"body":{"license.html":{}}}],["license",{"_index":496,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":516,"title":{},"body":{"license.html":{}}}],["limited",{"_index":543,"title":{},"body":{"license.html":{}}}],["line",{"_index":374,"title":{},"body":{"classes/TaskService.html":{}}}],["lineby",{"_index":373,"title":{},"body":{"classes/TaskService.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["link.attribs.href",{"_index":253,"title":{},"body":{"classes/ScraperService.html":{}}}],["link.attribs['data",{"_index":254,"title":{},"body":{"classes/ScraperService.html":{}}}],["linking",{"_index":491,"title":{},"body":{"index.html":{}}}],["links",{"_index":202,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"classes/ScraperService.html":{}}}],["links.length",{"_index":324,"title":{},"body":{"classes/ScraperService.html":{}}}],["literal",{"_index":236,"title":{},"body":{"classes/ScraperService.html":{}}}],["loadercrawl",{"_index":332,"title":{},"body":{"classes/TaskService.html":{}}}],["location",{"_index":117,"title":{},"body":{"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["log",{"_index":150,"title":{},"body":{"classes/Logger.html":{},"miscellaneous/variables.html":{}}}],["log(message",{"_index":176,"title":{},"body":{"classes/Logger.html":{}}}],["logger",{"_index":17,"title":{"classes/Logger.html":{}},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{}}}],["logger/logger.service",{"_index":62,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["logs",{"_index":171,"title":{},"body":{"classes/Logger.html":{},"classes/ScraperService.html":{}}}],["loop",{"_index":407,"title":{},"body":{"classes/TaskService.html":{}}}],["map((i",{"_index":252,"title":{},"body":{"classes/ScraperService.html":{}}}],["mark",{"_index":306,"title":{},"body":{"classes/ScraperService.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["medatada",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["merchantability",{"_index":545,"title":{},"body":{"license.html":{}}}],["merge",{"_index":519,"title":{},"body":{"license.html":{}}}],["message",{"_index":172,"title":{},"body":{"classes/Logger.html":{},"miscellaneous/variables.html":{}}}],["metada",{"_index":322,"title":{},"body":{"classes/ScraperService.html":{}}}],["metadata",{"_index":27,"title":{"interfaces/MetaData.html":{}},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/TaskService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["metadata_notfound",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadatainput",{"_index":201,"title":{"interfaces/MetaDataInput.html":{}},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"coverage.html":{}}}],["method",{"_index":293,"title":{},"body":{"classes/ScraperService.html":{}}}],["methods",{"_index":12,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["miscellaneous",{"_index":454,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":464,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":497,"title":{},"body":{"license.html":{}}}],["modify",{"_index":518,"title":{},"body":{"license.html":{}}}],["modules",{"_index":566,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["n",{"_index":183,"title":{},"body":{"classes/Logger.html":{}}}],["n${this.err('error",{"_index":193,"title":{},"body":{"classes/Logger.html":{}}}],["n${this.gray('log",{"_index":189,"title":{},"body":{"classes/Logger.html":{}}}],["n${this.green('info",{"_index":181,"title":{},"body":{"classes/Logger.html":{}}}],["name",{"_index":22,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["necessary",{"_index":466,"title":{},"body":{"miscellaneous/functions.html":{}}}],["never",{"_index":95,"title":{},"body":{"classes/CliService.html":{}}}],["new",{"_index":99,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{}}}],["node",{"_index":131,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"dependencies.html":{}}}],["noninfringement",{"_index":549,"title":{},"body":{"license.html":{}}}],["notice",{"_index":533,"title":{},"body":{"license.html":{}}}],["npm",{"_index":481,"title":{},"body":{"index.html":{}}}],["null",{"_index":186,"title":{},"body":{"classes/Logger.html":{},"classes/ScraperService.html":{}}}],["num_links",{"_index":198,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{}}}],["number",{"_index":200,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{}}}],["object",{"_index":472,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["obtaining",{"_index":508,"title":{},"body":{"license.html":{}}}],["once",{"_index":351,"title":{},"body":{"classes/TaskService.html":{},"index.html":{}}}],["once(rl",{"_index":385,"title":{},"body":{"classes/TaskService.html":{}}}],["optional",{"_index":24,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["otherwise",{"_index":561,"title":{},"body":{"license.html":{}}}],["out",{"_index":563,"title":{},"body":{"license.html":{}}}],["overview",{"_index":567,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":105,"title":{},"body":{"classes/CliService.html":{}}}],["p.tolowercase",{"_index":106,"title":{},"body":{"classes/CliService.html":{}}}],["package",{"_index":442,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":239,"title":{},"body":{"classes/ScraperService.html":{}}}],["pagebuffer",{"_index":304,"title":{},"body":{"classes/ScraperService.html":{}}}],["param",{"_index":66,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":156,"title":{},"body":{"classes/Logger.html":{},"classes/ScraperService.html":{}}}],["parse",{"_index":310,"title":{},"body":{"classes/ScraperService.html":{}}}],["parseargs",{"_index":14,"title":{"interfaces/ParseArgs.html":{}},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"coverage.html":{}}}],["parseargs(undefined",{"_index":54,"title":{},"body":{"classes/CliService.html":{}}}],["parsemetadata",{"_index":249,"title":{},"body":{"classes/ScraperService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsemetadata(undefined",{"_index":468,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parses",{"_index":57,"title":{},"body":{"classes/CliService.html":{}}}],["parsing",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsing_error",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":55,"title":{},"body":{"classes/CliService.html":{}}}],["particular",{"_index":547,"title":{},"body":{"license.html":{}}}],["path",{"_index":240,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["path.basename(image",{"_index":286,"title":{},"body":{"classes/ScraperService.html":{}}}],["path.basename(link",{"_index":261,"title":{},"body":{"classes/ScraperService.html":{}}}],["path.basename(url",{"_index":327,"title":{},"body":{"classes/ScraperService.html":{}}}],["paths",{"_index":465,"title":{},"body":{"miscellaneous/functions.html":{}}}],["permission",{"_index":502,"title":{},"body":{"license.html":{}}}],["permit",{"_index":526,"title":{},"body":{"license.html":{}}}],["person",{"_index":507,"title":{},"body":{"license.html":{}}}],["persons",{"_index":527,"title":{},"body":{"license.html":{}}}],["portions",{"_index":537,"title":{},"body":{"license.html":{}}}],["present",{"_index":264,"title":{},"body":{"classes/ScraperService.html":{}}}],["print",{"_index":387,"title":{},"body":{"classes/TaskService.html":{},"index.html":{}}}],["printhelp",{"_index":334,"title":{},"body":{"classes/TaskService.html":{}}}],["prints",{"_index":345,"title":{},"body":{"classes/TaskService.html":{}}}],["private",{"_index":9,"title":{},"body":{"classes/CliService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["process",{"_index":335,"title":{},"body":{"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["process(commands",{"_index":347,"title":{},"body":{"classes/TaskService.html":{}}}],["processes",{"_index":463,"title":{},"body":{"miscellaneous/functions.html":{}}}],["progress",{"_index":356,"title":{},"body":{"classes/TaskService.html":{},"dependencies.html":{}}}],["promise",{"_index":129,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["protocol",{"_index":48,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{},"miscellaneous/functions.html":{}}}],["protocols",{"_index":41,"title":{},"body":{"classes/CliService.html":{}}}],["protocols.find",{"_index":104,"title":{},"body":{"classes/CliService.html":{}}}],["provicded",{"_index":462,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provided",{"_index":538,"title":{},"body":{"license.html":{}}}],["public",{"_index":212,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["publish",{"_index":520,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":548,"title":{},"body":{"license.html":{}}}],["push",{"_index":84,"title":{},"body":{"classes/CliService.html":{}}}],["rc.10",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["reach",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":372,"title":{},"body":{"classes/TaskService.html":{}}}],["readable",{"_index":135,"title":{},"body":{"classes/FetchService.html":{}}}],["readline",{"_index":353,"title":{},"body":{"classes/TaskService.html":{}}}],["readline.createinterface",{"_index":376,"title":{},"body":{"classes/TaskService.html":{}}}],["record",{"_index":365,"title":{},"body":{"classes/TaskService.html":{}}}],["red",{"_index":146,"title":{},"body":{"classes/Logger.html":{}}}],["remove",{"_index":269,"title":{},"body":{"classes/ScraperService.html":{}}}],["replaceall(/http:\\/\\/+/gi",{"_index":274,"title":{},"body":{"classes/ScraperService.html":{}}}],["replaceall(/https:\\/\\/+/gi",{"_index":273,"title":{},"body":{"classes/ScraperService.html":{}}}],["request",{"_index":128,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":92,"title":{},"body":{"classes/CliService.html":{}}}],["res",{"_index":411,"title":{},"body":{"classes/TaskService.html":{}}}],["response",{"_index":132,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{}}}],["response.buffer",{"_index":137,"title":{},"body":{"classes/FetchService.html":{},"classes/ScraperService.html":{}}}],["response?.body",{"_index":265,"title":{},"body":{"classes/ScraperService.html":{}}}],["responsetext",{"_index":266,"title":{},"body":{"classes/ScraperService.html":{}}}],["restriction",{"_index":514,"title":{},"body":{"license.html":{}}}],["result",{"_index":110,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":112,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":81,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["returns",{"_index":52,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["rf",{"_index":493,"title":{},"body":{"index.html":{}}}],["rights",{"_index":517,"title":{},"body":{"license.html":{}}}],["rl",{"_index":375,"title":{},"body":{"classes/TaskService.html":{}}}],["rl.on('line",{"_index":382,"title":{},"body":{"classes/TaskService.html":{}}}],["rm",{"_index":492,"title":{},"body":{"index.html":{}}}],["run",{"_index":482,"title":{},"body":{"index.html":{}}}],["save",{"_index":268,"title":{},"body":{"classes/ScraperService.html":{}}}],["saveimagestodisk",{"_index":210,"title":{},"body":{"classes/ScraperService.html":{}}}],["saveimagestodisk(images",{"_index":227,"title":{},"body":{"classes/ScraperService.html":{}}}],["savenumlinkstodisk",{"_index":211,"title":{},"body":{"classes/ScraperService.html":{}}}],["savenumlinkstodisk(links",{"_index":233,"title":{},"body":{"classes/ScraperService.html":{}}}],["savepath",{"_index":271,"title":{},"body":{"classes/ScraperService.html":{}}}],["savepath.split('?')[0]}.html",{"_index":279,"title":{},"body":{"classes/ScraperService.html":{}}}],["saves",{"_index":230,"title":{},"body":{"classes/ScraperService.html":{},"miscellaneous/functions.html":{}}}],["scrape",{"_index":213,"title":{},"body":{"classes/ScraperService.html":{},"index.html":{}}}],["scrape(undefined",{"_index":235,"title":{},"body":{"classes/ScraperService.html":{}}}],["scraper.utils",{"_index":251,"title":{},"body":{"classes/ScraperService.html":{}}}],["scraper/scraper.service",{"_index":354,"title":{},"body":{"classes/TaskService.html":{}}}],["scraperservice",{"_index":204,"title":{"classes/ScraperService.html":{}},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{}}}],["scrapes",{"_index":410,"title":{},"body":{"classes/TaskService.html":{}}}],["scrapestart",{"_index":298,"title":{},"body":{"classes/ScraperService.html":{}}}],["scraping",{"_index":478,"title":{},"body":{"index.html":{}}}],["seenurls",{"_index":206,"title":{},"body":{"classes/ScraperService.html":{}}}],["sell",{"_index":524,"title":{},"body":{"license.html":{}}}],["serve",{"_index":480,"title":{},"body":{"index.html":{}}}],["shall",{"_index":534,"title":{},"body":{"license.html":{}}}],["site",{"_index":199,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"classes/ScraperService.html":{}}}],["skip",{"_index":288,"title":{},"body":{"classes/ScraperService.html":{}}}],["software",{"_index":510,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["src/.../cli.types.ts",{"_index":456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":458,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../scraper.utils.ts",{"_index":459,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/constants/index.ts",{"_index":421,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/index.ts",{"_index":424,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/cli/cli.service.ts",{"_index":6,"title":{},"body":{"classes/CliService.html":{},"coverage.html":{}}}],["src/modules/cli/cli.service.ts:10",{"_index":31,"title":{},"body":{"classes/CliService.html":{}}}],["src/modules/cli/cli.service.ts:14",{"_index":19,"title":{},"body":{"classes/CliService.html":{}}}],["src/modules/cli/cli.service.ts:23",{"_index":56,"title":{},"body":{"classes/CliService.html":{}}}],["src/modules/cli/cli.service.ts:7",{"_index":35,"title":{},"body":{"classes/CliService.html":{}}}],["src/modules/cli/cli.service.ts:75",{"_index":43,"title":{},"body":{"classes/CliService.html":{}}}],["src/modules/cli/cli.types.ts",{"_index":115,"title":{},"body":{"interfaces/CommandCollection.html":{},"interfaces/ParseArgs.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/fetch/fetch.service.ts",{"_index":119,"title":{},"body":{"classes/FetchService.html":{},"coverage.html":{}}}],["src/modules/fetch/fetch.service.ts:12",{"_index":124,"title":{},"body":{"classes/FetchService.html":{}}}],["src/modules/fetch/fetch.service.ts:4",{"_index":122,"title":{},"body":{"classes/FetchService.html":{}}}],["src/modules/logger/logger.service.ts",{"_index":142,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/modules/logger/logger.service.ts:10",{"_index":167,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:17",{"_index":175,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:30",{"_index":177,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:4",{"_index":154,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:43",{"_index":170,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:5",{"_index":165,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:6",{"_index":161,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:7",{"_index":152,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:8",{"_index":163,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/logger/logger.service.ts:9",{"_index":159,"title":{},"body":{"classes/Logger.html":{}}}],["src/modules/scraper/scraper.service.ts",{"_index":205,"title":{},"body":{"classes/ScraperService.html":{},"coverage.html":{}}}],["src/modules/scraper/scraper.service.ts:125",{"_index":229,"title":{},"body":{"classes/ScraperService.html":{}}}],["src/modules/scraper/scraper.service.ts:17",{"_index":215,"title":{},"body":{"classes/ScraperService.html":{}}}],["src/modules/scraper/scraper.service.ts:172",{"_index":237,"title":{},"body":{"classes/ScraperService.html":{}}}],["src/modules/scraper/scraper.service.ts:26",{"_index":218,"title":{},"body":{"classes/ScraperService.html":{}}}],["src/modules/scraper/scraper.service.ts:39",{"_index":226,"title":{},"body":{"classes/ScraperService.html":{}}}],["src/modules/scraper/scraper.service.ts:52",{"_index":223,"title":{},"body":{"classes/ScraperService.html":{}}}],["src/modules/scraper/scraper.service.ts:68",{"_index":234,"title":{},"body":{"classes/ScraperService.html":{}}}],["src/modules/scraper/scraper.types.ts",{"_index":195,"title":{},"body":{"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"coverage.html":{}}}],["src/modules/scraper/scraper.utils.ts",{"_index":437,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/task/task.service.ts",{"_index":331,"title":{},"body":{"classes/TaskService.html":{},"coverage.html":{}}}],["src/modules/task/task.service.ts:11",{"_index":336,"title":{},"body":{"classes/TaskService.html":{}}}],["src/modules/task/task.service.ts:123",{"_index":340,"title":{},"body":{"classes/TaskService.html":{}}}],["src/modules/task/task.service.ts:20",{"_index":348,"title":{},"body":{"classes/TaskService.html":{}}}],["src/modules/task/task.service.ts:41",{"_index":344,"title":{},"body":{"classes/TaskService.html":{}}}],["src/modules/task/task.service.ts:92",{"_index":346,"title":{},"body":{"classes/TaskService.html":{}}}],["start",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["started",{"_index":475,"title":{"index.html":{},"license.html":{}},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["steps",{"_index":490,"title":{},"body":{"index.html":{}}}],["stirng",{"_index":302,"title":{},"body":{"classes/ScraperService.html":{}}}],["stream",{"_index":369,"title":{},"body":{"classes/TaskService.html":{}}}],["string",{"_index":40,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["subject",{"_index":529,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":522,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":536,"title":{},"body":{"license.html":{}}}],["success",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["successfully",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switch",{"_index":83,"title":{},"body":{"classes/CliService.html":{}}}],["table",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":220,"title":{},"body":{"classes/ScraperService.html":{}}}],["tags",{"_index":318,"title":{},"body":{"classes/ScraperService.html":{}}}],["takes",{"_index":341,"title":{},"body":{"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["taskservice",{"_index":330,"title":{"classes/TaskService.html":{}},"body":{"classes/TaskService.html":{},"coverage.html":{}}}],["this.blue(message",{"_index":182,"title":{},"body":{"classes/Logger.html":{}}}],["this.checkifvalidurl(arg",{"_index":93,"title":{},"body":{"classes/CliService.html":{}}}],["this.commandcollection",{"_index":82,"title":{},"body":{"classes/CliService.html":{}}}],["this.commandcollection[args.crawl].push(arg",{"_index":96,"title":{},"body":{"classes/CliService.html":{}}}],["this.commandcollection[args.help",{"_index":91,"title":{},"body":{"classes/CliService.html":{}}}],["this.commandcollection[args.metadata].push(arg",{"_index":94,"title":{},"body":{"classes/CliService.html":{}}}],["this.crawl(crawljobs",{"_index":361,"title":{},"body":{"classes/TaskService.html":{}}}],["this.fetchanchors($('a",{"_index":317,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.fetchimages($('img",{"_index":320,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.fetchlinks($('link",{"_index":319,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.fetchmetadata(metadata",{"_index":357,"title":{},"body":{"classes/TaskService.html":{}}}],["this.fetchservice.fetchpagesfromweb(url",{"_index":305,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.loadercrawl.increment(100",{"_index":414,"title":{},"body":{"classes/TaskService.html":{}}}],["this.loadercrawl.start(websites.length",{"_index":404,"title":{},"body":{"classes/TaskService.html":{}}}],["this.loadercrawl.stop",{"_index":416,"title":{},"body":{"classes/TaskService.html":{}}}],["this.loadercrawl.updateeta",{"_index":415,"title":{},"body":{"classes/TaskService.html":{}}}],["this.logger.error",{"_index":392,"title":{},"body":{"classes/TaskService.html":{}}}],["this.logger.error(`${constants.log.metadata_notfound",{"_index":397,"title":{},"body":{"classes/TaskService.html":{}}}],["this.logger.error(constants.error.fetching_error",{"_index":139,"title":{},"body":{"classes/FetchService.html":{}}}],["this.logger.error(constants.error.image_parsing_error",{"_index":296,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.logger.error(constants.error.invalid_argument",{"_index":80,"title":{},"body":{"classes/CliService.html":{}}}],["this.logger.error(constants.error.parsing_error",{"_index":285,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.logger.info",{"_index":388,"title":{},"body":{"classes/TaskService.html":{}}}],["this.logger.info(constants.message.start",{"_index":409,"title":{},"body":{"classes/TaskService.html":{}}}],["this.logger.info(constants.message.status",{"_index":413,"title":{},"body":{"classes/TaskService.html":{}}}],["this.logger.info(constants.message.success",{"_index":282,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.printhelp",{"_index":359,"title":{},"body":{"classes/TaskService.html":{}}}],["this.red(message",{"_index":194,"title":{},"body":{"classes/Logger.html":{}}}],["this.saveimagestodisk",{"_index":329,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.savenumlinkstodisk",{"_index":328,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.scraperservice.scrape",{"_index":412,"title":{},"body":{"classes/TaskService.html":{}}}],["this.seenurls[url",{"_index":303,"title":{},"body":{"classes/ScraperService.html":{}}}],["this.validargs.includes(arg",{"_index":79,"title":{},"body":{"classes/CliService.html":{}}}],["this.warn",{"_index":184,"title":{},"body":{"classes/Logger.html":{}}}],["this.white",{"_index":191,"title":{},"body":{"classes/Logger.html":{}}}],["this.white(message",{"_index":190,"title":{},"body":{"classes/Logger.html":{}}}],["through",{"_index":362,"title":{},"body":{"classes/TaskService.html":{}}}],["throw",{"_index":408,"title":{},"body":{"classes/TaskService.html":{}}}],["till",{"_index":383,"title":{},"body":{"classes/TaskService.html":{}}}],["time",{"_index":297,"title":{},"body":{"classes/ScraperService.html":{}}}],["todo",{"_index":291,"title":{},"body":{"classes/ScraperService.html":{}}}],["tort",{"_index":560,"title":{},"body":{"license.html":{}}}],["true",{"_index":88,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["try",{"_index":98,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["tsconfig.tsbuildinfo",{"_index":494,"title":{},"body":{"index.html":{}}}],["type",{"_index":23,"title":{},"body":{"classes/CliService.html":{},"interfaces/CommandCollection.html":{},"classes/FetchService.html":{},"classes/Logger.html":{},"interfaces/MetaData.html":{},"interfaces/MetaDataInput.html":{},"interfaces/ParseArgs.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["unable",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["under",{"_index":69,"title":{},"body":{"classes/CliService.html":{}}}],["unwanted",{"_index":270,"title":{},"body":{"classes/ScraperService.html":{}}}],["url",{"_index":47,"title":{},"body":{"classes/CliService.html":{},"classes/FetchService.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["url(link",{"_index":100,"title":{},"body":{"classes/CliService.html":{}}}],["url.protocol",{"_index":107,"title":{},"body":{"classes/CliService.html":{}}}],["urlparser",{"_index":243,"title":{},"body":{"classes/ScraperService.html":{}}}],["urlparser.parse(url",{"_index":308,"title":{},"body":{"classes/ScraperService.html":{}}}],["urls",{"_index":221,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["use",{"_index":309,"title":{},"body":{"classes/ScraperService.html":{},"license.html":{}}}],["user",{"_index":32,"title":{},"body":{"classes/CliService.html":{},"classes/TaskService.html":{},"miscellaneous/functions.html":{}}}],["using",{"_index":127,"title":{},"body":{"classes/FetchService.html":{}}}],["valid",{"_index":36,"title":{},"body":{"classes/CliService.html":{},"miscellaneous/variables.html":{}}}],["valid_args",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validargs",{"_index":11,"title":{},"body":{"classes/CliService.html":{}}}],["validity",{"_index":46,"title":{},"body":{"classes/CliService.html":{}}}],["value",{"_index":26,"title":{},"body":{"classes/CliService.html":{},"classes/Logger.html":{},"classes/ScraperService.html":{},"classes/TaskService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":570,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":73,"title":{},"body":{"classes/CliService.html":{},"classes/ScraperService.html":{}}}],["void",{"_index":173,"title":{},"body":{"classes/Logger.html":{},"classes/TaskService.html":{}}}],["warn",{"_index":147,"title":{},"body":{"classes/Logger.html":{}}}],["warranties",{"_index":544,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":539,"title":{},"body":{"license.html":{}}}],["web",{"_index":238,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["webpage",{"_index":126,"title":{},"body":{"classes/FetchService.html":{}}}],["website",{"_index":231,"title":{},"body":{"classes/ScraperService.html":{},"classes/TaskService.html":{}}}],["websites",{"_index":342,"title":{},"body":{"classes/TaskService.html":{}}}],["whether",{"_index":557,"title":{},"body":{"license.html":{}}}],["white",{"_index":148,"title":{},"body":{"classes/Logger.html":{}}}],["without",{"_index":513,"title":{},"body":{"license.html":{}}}],["write",{"_index":283,"title":{},"body":{"classes/ScraperService.html":{}}}],["writetodisk",{"_index":250,"title":{},"body":{"classes/ScraperService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["writetodisk(file",{"_index":470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["writetodisk(pagebuffer",{"_index":315,"title":{},"body":{"classes/ScraperService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/CliService.html":{"url":"classes/CliService.html","title":"class - CliService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CliService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cli/cli.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                commandCollection\n                            \n                            \n                                    Private\n                                validArgs\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkIfValidURL\n                            \n                            \n                                parseArgs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/cli/cli.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        commandCollection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CommandCollection\n\n                    \n                \n                \n                    \n                        Default value : {\n    '--metadata': [],\n    '--help': false,\n    '--crawl': [],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/modules/cli/cli.service.ts:10\n                        \n                    \n\n            \n                \n                    User commands collector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validArgs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['--metadata', '--help', '--crawl']\n                    \n                \n                    \n                        \n                                Defined in src/modules/cli/cli.service.ts:7\n                        \n                    \n\n            \n                \n                    Valid cli args\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkIfValidURL\n                        \n                    \n                \n            \n            \n                \ncheckIfValidURL(link: string, protocols: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/cli/cli.service.ts:75\n                \n            \n\n\n            \n                \n                    This function checks the validity of a url and the protocol\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    link\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    protocols\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ['https', 'http']\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseArgs\n                        \n                    \n                \n            \n            \n                \nparseArgs(undefined: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/cli/cli.service.ts:23\n                \n            \n\n\n            \n                \n                    This function parses all arguments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CommandCollection\n\n                    \n                    \n                        CommandCollection\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import CONSTANTS from './../../constants/index';\nimport Logger from '../logger/logger.service';\nimport { URL } from 'url';\nimport { Args, CommandCollection, ParseArgs } from './cli.types';\nexport class CliService {\n  /** Valid cli args */\n  private validArgs = ['--metadata', '--help', '--crawl'];\n\n  /** User commands collector */\n  private commandCollection: CommandCollection = {\n    '--metadata': [],\n    '--help': false,\n    '--crawl': [],\n  };\n\n  constructor(private logger: Logger) {}\n\n  /**\n   * This function parses all arguments\n   * @param  {Partial} {args=[]}\n   * @returns CommandCollection\n   */\n  parseArgs({ args = [] }: Partial): CommandCollection {\n    /** Check if it's under metadata flag */\n    let isMetadata = false;\n\n    /** Iterate via all flags */\n    for (const arg of args) {\n      /** Check if there are invalid arguments */\n      if (arg?.startsWith('--') && !this.validArgs.includes(arg)) {\n        this.logger.error(CONSTANTS.ERROR.INVALID_ARGUMENT, arg);\n        return this.commandCollection;\n      }\n\n      /**\n       * This switch will push different commands into the commandCollection\n       */\n      switch (arg) {\n        case Args.METADATA:\n          isMetadata = true;\n          break;\n        case Args.HELP:\n          isMetadata = false;\n          this.commandCollection[Args.HELP] = true;\n          break;\n        default:\n          /** Metadata requests */\n          if (\n            !arg?.startsWith('--') &&\n            isMetadata &&\n            this.checkIfValidURL(arg)\n          ) {\n            this.commandCollection[Args.METADATA].push(arg as never);\n          }\n\n          /** Crawl requests */\n          if (\n            !arg?.startsWith('--') &&\n            !isMetadata &&\n            this.checkIfValidURL(arg)\n          ) {\n            this.commandCollection[Args.CRAWL].push(arg as never);\n          }\n      }\n    }\n    return this.commandCollection;\n  }\n  /**\n   * This function checks the validity of a url and the protocol\n   * @param  {string} link\n   * @param  {Array=['https'} protocols\n   * @param  {} 'http']\n   * @returns boolean\n   */\n  checkIfValidURL(\n    link: string,\n    protocols: Array = ['https', 'http'],\n  ): boolean {\n    try {\n      /** Url Validity */\n      const url = new URL(link);\n\n      /** URL has to contain the protocol for fetching */\n      const hasProtocol = protocols.find(\n        (p) => `${p.toLowerCase()}:` == url.protocol,\n      );\n      if (url && hasProtocol) {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommandCollection.html":{"url":"interfaces/CommandCollection.html","title":"interface - CommandCollection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CommandCollection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cli/cli.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            --crawl\n                                        \n                                \n                                \n                                        \n                                            --help\n                                        \n                                \n                                \n                                        \n                                            --metadata\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        --crawl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        --crawl:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        --help\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        --help:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        --metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        --metadata:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Args {\n  METADATA = '--metadata',\n  HELP = '--help',\n  CRAWL = '--crawl',\n}\n\nexport interface CommandCollection {\n  '--metadata': Array;\n  '--help': boolean;\n  '--crawl': Array;\n}\n\nexport interface ParseArgs {\n  args: Array;\n  location: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FetchService.html":{"url":"classes/FetchService.html","title":"class - FetchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FetchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/fetch/fetch.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchPagesFromWeb\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/fetch/fetch.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchPagesFromWeb\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchPagesFromWeb(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/fetch/fetch.service.ts:12\n                \n            \n\n\n            \n                \n                    Fetches a webpage using a get request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import fetch from 'node-fetch';\nimport Logger from '../logger/logger.service';\nimport CONSTANTS from './../../constants';\nexport class FetchService {\n  constructor(private logger: Logger) {}\n\n  /**\n   * Fetches a webpage using a get request\n   * @param  {string} url\n   * @returns Promise\n   */\n  async fetchPagesFromWeb(url: string): Promise {\n    try {\n      const response = await fetch(url);\n      /** returns a readable buffer */\n      return response.buffer();\n    } catch (e) {\n      this.logger.error(CONSTANTS.ERROR.FETCHING_ERROR, e?.message ?? e);\n      return Buffer.from('');\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/logger/logger.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                blue\n                            \n                            \n                                    Private\n                                err\n                            \n                            \n                                    Private\n                                gray\n                            \n                            \n                                    Private\n                                green\n                            \n                            \n                                    Private\n                                red\n                            \n                            \n                                    Private\n                                warn\n                            \n                            \n                                    Private\n                                white\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                info\n                            \n                            \n                                log\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        blue\n                        \n                    \n                \n            \n                \n                    \n                        Default value : chalk.bold.blueBright\n                    \n                \n                    \n                        \n                                Defined in src/modules/logger/logger.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        err\n                        \n                    \n                \n            \n                \n                    \n                        Default value : chalk.bold.red\n                    \n                \n                    \n                        \n                                Defined in src/modules/logger/logger.service.ts:4\n                        \n                    \n\n            \n                \n                    Color params init\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        gray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : chalk.bold.gray\n                    \n                \n                    \n                        \n                                Defined in src/modules/logger/logger.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        green\n                        \n                    \n                \n            \n                \n                    \n                        Default value : chalk.bold.green\n                    \n                \n                    \n                        \n                                Defined in src/modules/logger/logger.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        red\n                        \n                    \n                \n            \n                \n                    \n                        Default value : chalk.bold.redBright\n                    \n                \n                    \n                        \n                                Defined in src/modules/logger/logger.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        warn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : chalk.keyword('orange')\n                    \n                \n                    \n                        \n                                Defined in src/modules/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        white\n                        \n                    \n                \n            \n                \n                    \n                        Default value : chalk.bold.white\n                    \n                \n                    \n                        \n                                Defined in src/modules/logger/logger.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logger/logger.service.ts:43\n                \n            \n\n\n            \n                \n                    Error logs\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        info\n                        \n                    \n                \n            \n            \n                \ninfo(message: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logger/logger.service.ts:17\n                \n            \n\n\n            \n                \n                    Info logger\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logger/logger.service.ts:30\n                \n            \n\n\n            \n                \n                    General logs\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import chalk from 'chalk';\nexport default class Logger {\n  /** Color params init */\n  private err = chalk.bold.red;\n  private warn = chalk.keyword('orange');\n  private green = chalk.bold.green;\n  private blue = chalk.bold.blueBright;\n  private red = chalk.bold.redBright;\n  private gray = chalk.bold.gray;\n  private white = chalk.bold.white;\n\n  /**\n   * Info logger\n   * @param  {string} message\n   * @param  {any={}} data\n   */\n  info(message: string, data: any = {}) {\n    console.info(\n      `\\n${this.green('INFO:::')} ${this.blue(message)} \\n ${this.warn(\n        JSON.stringify(data, null, 2),\n      )} \\n`,\n    );\n  }\n\n  /**\n   * General logs\n   * @param  {string} message\n   * @param  {any={}} data\n   */\n  log(message: string, data: any = {}) {\n    console.log(\n      `\\n${this.gray('LOG::: ')} ${this.white(message)} \\n ${this.white(\n        JSON.stringify(data, null, 2),\n      )} \\n`,\n    );\n  }\n\n  /**\n   * Error logs\n   * @param  {string} message\n   * @param  {any={}} data\n   */\n  error(message: string, data: any = {}) {\n    console.error(\n      `\\n${this.err('ERROR::: ')} ${this.red(message)} \\n ${this.warn(\n        JSON.stringify(data, null, 2),\n      )} \\n`,\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetaData.html":{"url":"interfaces/MetaData.html","title":"interface - MetaData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetaData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scraper/scraper.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            images\n                                        \n                                \n                                \n                                        \n                                            last_fetch\n                                        \n                                \n                                \n                                        \n                                            num_links\n                                        \n                                \n                                \n                                        \n                                            site\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        last_fetch:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        num_links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        num_links:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        site\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        site:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MetaDataInput {\n  links: number;\n  anchors: number;\n  images: number;\n  last_fetch: string;\n  site: string;\n}\n\nexport interface MetaData {\n  num_links: number;\n  images: number;\n  last_fetch: string;\n  site: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetaDataInput.html":{"url":"interfaces/MetaDataInput.html","title":"interface - MetaDataInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetaDataInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scraper/scraper.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            anchors\n                                        \n                                \n                                \n                                        \n                                            images\n                                        \n                                \n                                \n                                        \n                                            last_fetch\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            site\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        anchors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        anchors:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        images\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        images:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_fetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        last_fetch:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        site\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        site:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MetaDataInput {\n  links: number;\n  anchors: number;\n  images: number;\n  last_fetch: string;\n  site: string;\n}\n\nexport interface MetaData {\n  num_links: number;\n  images: number;\n  last_fetch: string;\n  site: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParseArgs.html":{"url":"interfaces/ParseArgs.html","title":"interface - ParseArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParseArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/cli/cli.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            args\n                                        \n                                \n                                \n                                        \n                                            location\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        args\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        args:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Args {\n  METADATA = '--metadata',\n  HELP = '--help',\n  CRAWL = '--crawl',\n}\n\nexport interface CommandCollection {\n  '--metadata': Array;\n  '--help': boolean;\n  '--crawl': Array;\n}\n\nexport interface ParseArgs {\n  args: Array;\n  location: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScraperService.html":{"url":"classes/ScraperService.html","title":"class - ScraperService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScraperService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/scraper/scraper.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                seenUrls\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fetchAnchors\n                            \n                            \n                                    Private\n                                fetchImages\n                            \n                            \n                                    Private\n                                fetchLinks\n                            \n                            \n                                    Async\n                                saveImagesToDisk\n                            \n                            \n                                    Async\n                                saveNumLinksToDisk\n                            \n                            \n                                    Public\n                                    Async\n                                scrape\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fetchService: FetchService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in src/modules/scraper/scraper.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fetchService\n                                                  \n                                                        \n                                                                        FetchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        seenUrls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/modules/scraper/scraper.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        fetchAnchors\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAnchors(anchors: Cheerio)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scraper/scraper.service.ts:26\n                \n            \n\n\n            \n                \n                    Fetches all the anchor tag urls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    anchors\n                                    \n                                            Cheerio\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        fetchImages\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchImages(images: Cheerio)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scraper/scraper.service.ts:52\n                \n            \n\n\n            \n                \n                    Fetches all image urls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    images\n                                    \n                                            Cheerio\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        fetchLinks\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchLinks(links: Cheerio)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scraper/scraper.service.ts:39\n                \n            \n\n\n            \n                \n                    Fetches all link tag urls\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    links\n                                    \n                                            Cheerio\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveImagesToDisk\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveImagesToDisk(images: string[], host: string, protocol: string, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scraper/scraper.service.ts:125\n                \n            \n\n\n            \n                \n                    Saves images in the website to the disk\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    images\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    protocol\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveNumLinksToDisk\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveNumLinksToDisk(links: string[], host: string, protocol: string, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scraper/scraper.service.ts:68\n                \n            \n\n\n            \n                \n                    Saves links and anchors to disk\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    links\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    protocol\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        scrape\n                        \n                    \n                \n            \n            \n                \n                    \n                    scrape(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/scraper/scraper.service.ts:172\n                \n            \n\n\n            \n                \n                    Cheerio\nThis function will scrape a web page\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import path from 'path';\nimport { FetchService } from './../fetch/fetch.service';\nimport cheerio, { Cheerio, Element } from 'cheerio';\nimport urlParser from 'url';\nimport fse from 'fs-extra';\nimport fetch from 'node-fetch';\nimport {\n  getUrl,\n  hasExtension,\n  parseMetadata,\n  writeToDisk,\n} from './scraper.utils';\nimport Logger from '../logger/logger.service';\nimport CONSTANTS from '../../constants';\n\nexport class ScraperService {\n  private seenUrls: any = {};\n\n  constructor(private fetchService: FetchService, private logger: Logger) {}\n\n  /**\n   * Fetches all the anchor tag urls\n   * @param  {Cheerio} anchors\n   * @returns string\n   */\n  private fetchAnchors(anchors: Cheerio): string[] {\n    return anchors\n      .map((i, link) =>\n        link.attribs.href ? link.attribs.href : link.attribs['data-href'],\n      )\n      .get();\n  }\n\n  /**\n   * Fetches all link tag urls\n   * @param  {Cheerio} links\n   * @returns string\n   */\n  private fetchLinks(links: Cheerio): string[] {\n    return links\n      .map((i, link) =>\n        link.attribs.href ? link.attribs.href : link.attribs['data-href'],\n      )\n      .get();\n  }\n\n  /**\n   * Fetches all image urls\n   * @param  {Cheerio} images\n   * @returns string\n   */\n  private fetchImages(images: Cheerio): string[] {\n    return images\n      .map((i, img) => {\n        return img.attribs.src ? img.attribs.src : img.attribs.srcset;\n      })\n      .get();\n  }\n\n  /**\n   * Saves links and anchors to disk\n   * @param  {string[]} links\n   * @param  {string} host\n   * @param  {string} protocol\n   * @param  {string} url\n   * @returns Promise\n   */\n  async saveNumLinksToDisk(\n    links: string[],\n    host: string,\n    protocol: string,\n    url: string,\n  ): Promise {\n    for (const link of links) {\n      /** Get the base url */\n      const filename = path.basename(link);\n      try {\n        /** Get web response */\n        const response = await fetch(\n          getUrl(link, host as string, protocol as string),\n        );\n\n        /** Check if body is present */\n        if (response?.body) {\n          /** Get the buffer */\n          const responseText = await response.buffer();\n          /**\n           * Generate the save path\n           * Remove unwanted protocol params\n           *\n           */\n          let savePath = `downloads/${path.basename(url)}/${path.dirname(\n            link,\n          )}/${filename}`\n            .replaceAll(/https:\\/\\/+/gi, '/')\n            .replaceAll(/http:\\/\\/+/gi, '/');\n\n          /** Check if the file as an extension */\n          if (!hasExtension(savePath)) {\n            /** No extension, just add .html */\n            savePath = `${savePath.split('?')[0]}.html`;\n          }\n\n          /** Logs into console about files */\n          //this.logger.info(CONSTANTS.MESSAGE.SUCCESS, filename);\n\n          /** Write to disk */\n          fse.outputFileSync(savePath, responseText);\n        }\n      } catch (e) {\n        this.logger.error(CONSTANTS.ERROR.PARSING_ERROR, e?.message ?? e);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Saves images in the website to the disk\n   * @param  {string[]} images\n   * @param  {string} host\n   * @param  {string} protocol\n   * @param  {string} url\n   * @returns Promise\n   */\n  async saveImagesToDisk(\n    images: string[],\n    host: string,\n    protocol: string,\n    url: string,\n  ): Promise {\n    for (const image of images) {\n      /** Get the base url */\n      const filename = path.basename(image);\n      try {\n        /** Get image response via a get request */\n        const response = await fetch(\n          getUrl(image, host as string, protocol as string),\n        );\n\n        /** Check if body is present */\n        if (response?.body) {\n          /** Get image as a buffer */\n          const data = await response.buffer();\n          /**\n           * Skip all base64 encoded images\n           * Todo: Implement a method to save all base64 encoded images\n           * */\n          if (!image.startsWith('data')) {\n            /** Save path generation */\n            const savePath = `downloads/${path.basename(url)}/${path.dirname(\n              image,\n            )}/${filename}`\n              .replaceAll(/https:\\/\\/+/gi, '/')\n              .replaceAll(/http:\\/\\/+/gi, '/');\n            /** Write to disk */\n            fse.outputFileSync(savePath, data);\n          }\n        }\n      } catch (e) {\n        this.logger.error(CONSTANTS.ERROR.IMAGE_PARSING_ERROR, e?.message ?? e);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Cheerio\n   * This function will scrape a web page\n   * @param  {string} url : Website url\n   * @returns Promise\n   */\n  public async scrape({ url }: { url: string }): Promise {\n    /** Scrape time */\n    const scrapeStart: string = new Date().toUTCString();\n\n    /** If already crawled, return null stirng; */\n    if (this.seenUrls[url]) return false;\n\n    /** Fetch Page Buffer */\n    const pageBuffer = await this.fetchService.fetchPagesFromWeb(url);\n\n    /** Mark the url */\n    this.seenUrls[url] = true;\n\n    /** Extract the host and protocol from url */\n    const { host, protocol } = urlParser.parse(url);\n\n    /** Use Cheerio to parse the page bugger */\n    const $ = cheerio.load(pageBuffer);\n\n    /** Get the index location */\n    const indexLocation = `downloads/${path.basename(url)}`;\n\n    /** Save the index page */\n    writeToDisk(pageBuffer, `${indexLocation}/index.html`);\n\n    /** Fetch all anchors */\n    const anchors = this.fetchAnchors($('a'));\n\n    /** Fetch all Link tags */\n    const links = this.fetchLinks($('link'));\n\n    /** Fetch all images */\n    const images = this.fetchImages($('img'));\n\n    /** Create the metada files for crawling */\n    parseMetadata({\n      links: links.length,\n      anchors: anchors.length,\n      images: images.length,\n      last_fetch: scrapeStart,\n      site: path.basename(url),\n    });\n\n    /** Save links to disk */\n    await this.saveNumLinksToDisk(\n      links,\n      host as string,\n      protocol as string,\n      url,\n    );\n\n    /** Save anchors to disk */\n    await this.saveNumLinksToDisk(\n      anchors,\n      host as string,\n      protocol as string,\n      url,\n    );\n\n    /** Save Images to disk */\n    await this.saveImagesToDisk(\n      images,\n      host as string,\n      protocol as string,\n      url,\n    );\n\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskService.html":{"url":"classes/TaskService.html","title":"class - TaskService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/task/task.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loaderCrawl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                crawl\n                            \n                            \n                                    Async\n                                fetchMetaData\n                            \n                            \n                                printHelp\n                            \n                            \n                                    Public\n                                    Async\n                                process\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, scraperService: ScraperService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/task/task.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scraperService\n                                                  \n                                                        \n                                                                        ScraperService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loaderCrawl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new cliProgress.SingleBar({}, cliProgress.Presets.rect)\n                    \n                \n                    \n                        \n                                Defined in src/modules/task/task.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        crawl\n                        \n                    \n                \n            \n            \n                \n                    \n                    crawl(websites: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:123\n                \n            \n\n\n            \n                \n                    Takes an array of urls to crawl\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    websites\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fetchMetaData\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMetaData(metadata: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:41\n                \n            \n\n\n            \n                \n                    Prints the metadata to the console\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metadata\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        printHelp\n                        \n                    \n                \n            \n            \n                \nprintHelp()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:92\n                \n            \n\n\n            \n                \n                    Prints help commands to console\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        process\n                        \n                    \n                \n            \n            \n                \n                    \n                    process(commands: CommandCollection)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/task/task.service.ts:20\n                \n            \n\n\n            \n                \n                    Process all incoming user commands\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commands\n                                    \n                                                CommandCollection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import CONSTANTS from '../../constants/index';\nimport { CommandCollection } from '../cli/cli.types';\nimport Logger from '../logger/logger.service';\nimport path from 'path';\nimport fs from 'fs';\nimport { once } from 'events';\nimport readline from 'readline';\nimport { ScraperService } from '../scraper/scraper.service';\nimport cliProgress from 'cli-progress';\nexport class TaskService {\n  private loaderCrawl = new cliProgress.SingleBar({}, cliProgress.Presets.rect);\n\n  constructor(private logger: Logger, private scraperService: ScraperService) {}\n\n  /**\n   * Process all incoming user commands\n   * @param  {CommandCollection} commands\n   * @returns Promise\n   */\n  public async process(commands: CommandCollection): Promise {\n    /** Process Metadata */\n    const metaData = commands['--metadata'];\n    await this.fetchMetaData(metaData);\n\n    /** Process Help */\n    const helpNeeded = commands['--help'];\n    if (helpNeeded) {\n      this.printHelp();\n    }\n\n    /** Process Crawling */\n    const crawlJobs = commands['--crawl'];\n    await this.crawl(crawlJobs);\n  }\n\n  /**\n   * Prints the metadata to the console\n   * @param  {string[]} metadata\n   * @returns Promise\n   */\n  async fetchMetaData(metadata: string[]): Promise {\n    /** Iterate through metadata */\n    for (const request of metadata) {\n      try {\n        /** Initialize last record */\n        let lastRecord = '';\n\n        /** Initialize the destination location */\n        const destination = `downloads/${path.basename(request)}/.metadata`;\n\n        /** Create a file stream */\n        const fileStream = fs.createReadStream(destination);\n\n        /** Read the file lineby line */\n        const rl = readline.createInterface({\n          input: fileStream,\n          crlfDelay: Infinity,\n        });\n\n        /** Assign the current line to last line */\n        rl.on('line', (line) => {\n          lastRecord = line;\n        });\n\n        /** Await till the stream closes */\n        await once(rl, 'close');\n\n        /** Print the record to console */\n        if (lastRecord) {\n          this.logger.info(\n            `${CONSTANTS.LOG.METADATA} for ${request}`,\n            JSON.parse(lastRecord),\n          );\n        } else {\n          /** Prints error if not found */\n          this.logger.error(\n            `${CONSTANTS.LOG.METADATA_NOTFOUND} for ${request}`,\n            JSON.parse(lastRecord),\n          );\n        }\n      } catch (e) {\n        /** Incase if metadata doesn't exist */\n        this.logger.error(`${CONSTANTS.LOG.METADATA_NOTFOUND} for ${request}`);\n      }\n    }\n  }\n\n  /**\n   * Prints help commands to console\n   * @returns void\n   */\n  printHelp(): void {\n    this.logger.info(`\n    AVAILABLE COMMANDS\n    ------------------\n\n    '--metadata': Array;\n    '--help': boolean;\n    '--crawl': Array;\n\n    EXAMPLES\n    --------\n\n    # To crawl a web\n      fetch https://www.google.com https://www.autify.com\n    \n    # To print metadata\n      fetch --metadata https://www.google.com https://www.autify.com https://www.yahoo.com\n    \n    # To print help\n      fetch --help\n    \n    # To to all at once\n      fetch https://www.google.com https://www.autify.com --metadata https://www.google.com https://www.autify.com https://www.yahoo.com --help\n    `);\n  }\n\n  /**\n   * Takes an array of urls to crawl\n   * @param  {string[]} websites\n   * @returns Promise\n   */\n  async crawl(websites: string[]): Promise {\n    /** Progress bar */\n    this.loaderCrawl.start(websites.length * 100, 0);\n\n    /** Loop throw array of urls */\n    for await (const website of websites) {\n      this.logger.info(CONSTANTS.MESSAGE.START, website);\n\n      /** Scrapes the url */\n      const res = await this.scraperService.scrape({\n        url: website,\n      });\n      this.logger.info(CONSTANTS.MESSAGE.STATUS, res);\n      this.loaderCrawl.increment(100);\n      this.loaderCrawl.updateETA();\n    }\n\n    this.loaderCrawl.increment(100);\n    this.loaderCrawl.stop();\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/constants/index.ts\n            \n            variable\n            CONSTANTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            function\n            cli\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/cli/cli.service.ts\n            \n            class\n            CliService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/modules/cli/cli.types.ts\n            \n            interface\n            CommandCollection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/cli/cli.types.ts\n            \n            interface\n            ParseArgs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/fetch/fetch.service.ts\n            \n            class\n            FetchService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/modules/logger/logger.service.ts\n            \n            class\n            Logger\n            \n                36 %\n                (4/11)\n            \n        \n        \n            \n                \n                src/modules/scraper/scraper.service.ts\n            \n            class\n            ScraperService\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/modules/scraper/scraper.types.ts\n            \n            interface\n            MetaData\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/scraper/scraper.types.ts\n            \n            interface\n            MetaDataInput\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/scraper/scraper.utils.ts\n            \n            function\n            getUrl\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/scraper/scraper.utils.ts\n            \n            function\n            hasExtension\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/scraper/scraper.utils.ts\n            \n            function\n            parseMetadata\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/scraper/scraper.utils.ts\n            \n            function\n            writeToDisk\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/task/task.service.ts\n            \n            class\n            TaskService\n            \n                57 %\n                (4/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            chalk : ^4.1.1\n        \n            cheerio : ^1.0.0-rc.10\n        \n            cli-progress : ^3.9.0\n        \n            colors : ^1.4.0\n        \n            esm : ^3.2.25\n        \n            fs-extra : ^10.0.0\n        \n            node-fetch : ^2.6.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Args   (src/.../cli.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/cli/cli.types.ts\n    \n        \n            \n                \n                    \n                        \n                        Args\n                    \n                \n                        \n                            \n                                 METADATA\n                            \n                        \n                        \n                            \n                                Value : --metadata\n                            \n                        \n                        \n                            \n                                 HELP\n                            \n                        \n                        \n                            \n                                Value : --help\n                            \n                        \n                        \n                            \n                                 CRAWL\n                            \n                        \n                        \n                            \n                                Value : --crawl\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cli   (src/.../index.ts)\n                        \n                        \n                            getUrl   (src/.../scraper.utils.ts)\n                        \n                        \n                            hasExtension   (src/.../scraper.utils.ts)\n                        \n                        \n                            parseMetadata   (src/.../scraper.utils.ts)\n                        \n                        \n                            writeToDisk   (src/.../scraper.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cli\n                        \n                    \n                \n            \n            \n                \ncli(args)\n                \n            \n\n\n\n\n            \n                \n                    Takes in the user args and process them\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    args\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User provicded arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/modules/scraper/scraper.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getUrl\n                        \n                    \n                \n            \n            \n                \ngetUrl(link, host, protocol)\n                \n            \n\n\n\n\n            \n                \n                    Processes URLS and generate the missing paths if necessary\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    link\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    protocol\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasExtension\n                        \n                    \n                \n            \n            \n                \nhasExtension(link)\n                \n            \n\n\n\n\n            \n                \n                    Checks if the url has an extension\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    link\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        url\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseMetadata\n                        \n                    \n                \n            \n            \n                \nparseMetadata(undefined)\n                \n            \n\n\n\n\n            \n                \n                    Generates a metadata file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         MetaData\n\n                    \n                    \n                        MetaData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeToDisk\n                        \n                    \n                \n            \n            \n                \nwriteToDisk(file, location, options: object)\n                \n            \n\n\n\n\n            \n                \n                    Saves anything to disk\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    location\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSCRAPE ME\nAn entry level Web Scraping CLI\nDocumentation\nDocs\n# Generate docs and to serve docs\nnpm run docInstallation\nInit\n\nnpm i\n\nchmod 777 bin/fetch\n\nchmod 777 downloads\nFetch command\n\nnpm link\nBuilding steps after linking\nrm -rf tsconfig.tsbuildinfo && npm run buildCrawling\n#### AVAILABLE COMMANDS\n-----------------------\n\n    '--metadata': Array;\n    '--help': boolean;\n    '--crawl': Array;\n\n#### EXAMPLES\n-------------\n\n    # To crawl a web\n      fetch https://www.google.com https://www.autify.com\n    \n    # To print metadata\n      fetch --metadata https://www.google.com https://www.autify.com https://www.yahoo.com\n    \n    # To print help\n      fetch --help\n    \n    # To to all at once\n      fetch https://www.google.com https://www.autify.com --metadata https://www.google.com https://www.autify.com https://www.yahoo.com --help\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Dinushanka\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CONSTANTS   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONSTANTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  ERROR: {\n    PARSING_ERROR: 'LINK / ANCHOR Parsing Error',\n    IMAGE_PARSING_ERROR: 'Image Parsing Error',\n    FETCHING_ERROR: 'Get request failure, Unable to reach the web',\n    INVALID_ARGUMENT: 'Invalid commandline argument',\n  },\n  INFO: {},\n  LOG: {\n    METADATA: 'Medatada found!',\n    METADATA_NOTFOUND: 'Medatada not found!',\n  },\n  MESSAGE: {\n    SUCCESS: 'Successfully completed CRAWLING',\n    STATUS: 'Crawling Status',\n    START: 'Started Crawling',\n    VALID_ARGS: 'Valid arguments',\n  },\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
